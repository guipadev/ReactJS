/*
Replicaremos la consulta que creamos en el characters.jsarchivo y le cambiaremos el nombre a GET_SINGLE_CHARACTER. 
En lugar de buscar nombres, buscaremos IDs.

Buscamos IDs porque son Ãºnicos y queremos aleatorizar los caracteres que se elegirÃ¡n una vez que un usuario no obtenga 
el carÃ¡cter que estÃ¡ buscando.

randomNumber inicializa el estado a la Math.floorfunciÃ³n que genera un nÃºmero aleatorio entre 0 y 199 inclusive, 
usando el Math.random()mÃ©todo y multiplicÃ¡ndolo por 200.

La Math.floor funciÃ³n redondea el resultado de la expresiÃ³n al entero mÃ¡s cercano. 
Cada vez que randomNumbernecesita actualizarse, la setRandomNumber funciÃ³n toma un nuevo valor como argumento 
y actualiza el estado.

Tenemos un mensaje para alertar al usuario de que no se encuentra el personaje que estÃ¡ buscando, 
pero puede consultar un nuevo personaje.

La rueda de carga tambiÃ©n se implementa en este componente, y los errores estÃ¡n ahÃ­ en caso de que ocurra algÃºn problema. 
Las imÃ¡genes y las tarjetas son similares al characters.js formato ya que queremos coherencia con el aspecto de todo.
*/

import { useQuery } from "@apollo/client";
import { GET_SINGLE_CHARACTER } from "./helpers";
import { useState } from "react";
import "./App.css";

export const RandomCharacter = () => {
  const [randomNumber, setRandomNumber] = useState(
    Math.floor(Math.random() * 200)
  );
  const { loading, error, data } = useQuery(GET_SINGLE_CHARACTER, {
    variables: { id: randomNumber },
  });

  return (
    <div>
      <p className="intro">
        Sorry, we could not find that character ðŸ˜ž
        <br />
        <br />
        How about this one instead? ðŸ˜‰{" "}
      </p>

      {/* {loading && <p>loading...</p>} */}
      {loading && (
        <div className="loader-container">
          <div className="loader"></div>
        </div>
      )}

      {error && <p> error </p>}

      {data && (
        <>
          <div
            className="card"
            key={data.character.name}
            style={{
              backgroundImage: `url(${data.character.image})`,
              backgroundRepeat: "no-repeat",
            }}
          >
            <div className="info">
              <h2 className="h3">{data.character.name}</h2>
              <p>Status: {data.character.status}</p>
              <p>Species: {data.character.species}</p>
              <p>Type: {data.character.type}</p>
              <p>Gender: {data.character.gender}</p>
              <p>Origin: {data.character.origin.name}</p>
              <p>Location: {data.character.location.name}</p>
            </div>
          </div>
        </>
      )}
    </div>
  );
};
